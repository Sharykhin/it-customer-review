// Code generated by protoc-gen-go. DO NOT EDIT.
// source: review.proto

/*
Package review is a generated protocol buffer package.

It is generated from these files:
	review.proto

It has these top-level messages:
	Empty
	Pong
	ReviewRequest
	ReviewUpdateRequest
	ReviewResponse
*/
package review

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty is some sort if missing input parameter
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Pong simple response
type Pong struct {
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pong) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

// ReviewRequest message for creating a new review
type ReviewRequest struct {
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	Published bool   `protobuf:"varint,5,opt,name=Published" json:"Published,omitempty"`
	Score     int64  `protobuf:"varint,6,opt,name=Score" json:"Score,omitempty"`
	Category  string `protobuf:"bytes,7,opt,name=Category" json:"Category,omitempty"`
}

func (m *ReviewRequest) Reset()                    { *m = ReviewRequest{} }
func (m *ReviewRequest) String() string            { return proto.CompactTextString(m) }
func (*ReviewRequest) ProtoMessage()               {}
func (*ReviewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReviewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReviewRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReviewRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviewRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *ReviewRequest) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ReviewRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

// ReviewUpdateRequest for updating an existing review
type ReviewUpdateRequest struct {
	ID       string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	Score    int64  `protobuf:"varint,5,opt,name=Score" json:"Score,omitempty"`
	Category string `protobuf:"bytes,6,opt,name=Category" json:"Category,omitempty"`
	// Types that are valid to be assigned to Published:
	//	*ReviewUpdateRequest_PublishedNull
	//	*ReviewUpdateRequest_PublishedValue
	Published isReviewUpdateRequest_Published `protobuf_oneof:"Published"`
}

func (m *ReviewUpdateRequest) Reset()                    { *m = ReviewUpdateRequest{} }
func (m *ReviewUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ReviewUpdateRequest) ProtoMessage()               {}
func (*ReviewUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isReviewUpdateRequest_Published interface {
	isReviewUpdateRequest_Published()
}

type ReviewUpdateRequest_PublishedNull struct {
	PublishedNull bool `protobuf:"varint,7,opt,name=Published_null,json=PublishedNull,oneof"`
}
type ReviewUpdateRequest_PublishedValue struct {
	PublishedValue bool `protobuf:"varint,8,opt,name=Published_value,json=PublishedValue,oneof"`
}

func (*ReviewUpdateRequest_PublishedNull) isReviewUpdateRequest_Published()  {}
func (*ReviewUpdateRequest_PublishedValue) isReviewUpdateRequest_Published() {}

func (m *ReviewUpdateRequest) GetPublished() isReviewUpdateRequest_Published {
	if m != nil {
		return m.Published
	}
	return nil
}

func (m *ReviewUpdateRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ReviewUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReviewUpdateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReviewUpdateRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviewUpdateRequest) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ReviewUpdateRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ReviewUpdateRequest) GetPublishedNull() bool {
	if x, ok := m.GetPublished().(*ReviewUpdateRequest_PublishedNull); ok {
		return x.PublishedNull
	}
	return false
}

func (m *ReviewUpdateRequest) GetPublishedValue() bool {
	if x, ok := m.GetPublished().(*ReviewUpdateRequest_PublishedValue); ok {
		return x.PublishedValue
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReviewUpdateRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReviewUpdateRequest_OneofMarshaler, _ReviewUpdateRequest_OneofUnmarshaler, _ReviewUpdateRequest_OneofSizer, []interface{}{
		(*ReviewUpdateRequest_PublishedNull)(nil),
		(*ReviewUpdateRequest_PublishedValue)(nil),
	}
}

func _ReviewUpdateRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReviewUpdateRequest)
	// Published
	switch x := m.Published.(type) {
	case *ReviewUpdateRequest_PublishedNull:
		t := uint64(0)
		if x.PublishedNull {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ReviewUpdateRequest_PublishedValue:
		t := uint64(0)
		if x.PublishedValue {
			t = 1
		}
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("ReviewUpdateRequest.Published has unexpected type %T", x)
	}
	return nil
}

func _ReviewUpdateRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReviewUpdateRequest)
	switch tag {
	case 7: // Published.Published_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Published = &ReviewUpdateRequest_PublishedNull{x != 0}
		return true, err
	case 8: // Published.Published_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Published = &ReviewUpdateRequest_PublishedValue{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _ReviewUpdateRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReviewUpdateRequest)
	// Published
	switch x := m.Published.(type) {
	case *ReviewUpdateRequest_PublishedNull:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *ReviewUpdateRequest_PublishedValue:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Response of a review
type ReviewResponse struct {
	ID        string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	Published bool   `protobuf:"varint,5,opt,name=Published" json:"Published,omitempty"`
	Score     int64  `protobuf:"varint,6,opt,name=Score" json:"Score,omitempty"`
	Category  string `protobuf:"bytes,7,opt,name=Category" json:"Category,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *ReviewResponse) Reset()                    { *m = ReviewResponse{} }
func (m *ReviewResponse) String() string            { return proto.CompactTextString(m) }
func (*ReviewResponse) ProtoMessage()               {}
func (*ReviewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReviewResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ReviewResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReviewResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReviewResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviewResponse) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *ReviewResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ReviewResponse) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ReviewResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "review.Empty")
	proto.RegisterType((*Pong)(nil), "review.Pong")
	proto.RegisterType((*ReviewRequest)(nil), "review.ReviewRequest")
	proto.RegisterType((*ReviewUpdateRequest)(nil), "review.ReviewUpdateRequest")
	proto.RegisterType((*ReviewResponse)(nil), "review.ReviewResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Review service

type ReviewClient interface {
	// Create a new review
	Create(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	// Update an existing review
	Update(ctx context.Context, in *ReviewUpdateRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	// Detect whether server works or not
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
}

type reviewClient struct {
	cc *grpc.ClientConn
}

func NewReviewClient(cc *grpc.ClientConn) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) Create(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := grpc.Invoke(ctx, "/review.Review/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Update(ctx context.Context, in *ReviewUpdateRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := grpc.Invoke(ctx, "/review.Review/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/review.Review/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Review service

type ReviewServer interface {
	// Create a new review
	Create(context.Context, *ReviewRequest) (*ReviewResponse, error)
	// Update an existing review
	Update(context.Context, *ReviewUpdateRequest) (*ReviewResponse, error)
	// Detect whether server works or not
	Ping(context.Context, *Empty) (*Pong, error)
}

func RegisterReviewServer(s *grpc.Server, srv ReviewServer) {
	s.RegisterService(&_Review_serviceDesc, srv)
}

func _Review_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Create(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Update(ctx, req.(*ReviewUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Review_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Review_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Review_Update_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Review_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review.proto",
}

func init() { proto.RegisterFile("review.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x65, 0xa0, 0x94, 0x72, 0x3f, 0xe0, 0x4b, 0xee, 0xf7, 0x93, 0x09, 0xba, 0x20, 0x4d, 0x8c,
	0xb8, 0x61, 0xa1, 0x2b, 0x57, 0x46, 0xc1, 0x44, 0x36, 0x84, 0x8c, 0xd1, 0xad, 0x29, 0x72, 0x83,
	0x4d, 0x4a, 0x5b, 0xdb, 0x29, 0x86, 0xe7, 0x71, 0xe9, 0xdb, 0xf8, 0x3c, 0x2e, 0x4c, 0x67, 0xfa,
	0x63, 0x4d, 0x74, 0x85, 0xbb, 0x9e, 0x93, 0xdb, 0x93, 0x73, 0xe6, 0x9e, 0x0b, 0x9d, 0x88, 0x36,
	0x2e, 0x3d, 0x8d, 0xc2, 0x28, 0x90, 0x01, 0x9a, 0x1a, 0xd9, 0x2d, 0x68, 0x5e, 0xae, 0x43, 0xb9,
	0xb5, 0x6d, 0x30, 0xe6, 0x81, 0xbf, 0xc2, 0x3e, 0x58, 0x82, 0xe2, 0x30, 0xf0, 0x63, 0xe2, 0x6c,
	0xc0, 0x86, 0x6d, 0x51, 0x60, 0xfb, 0x99, 0x41, 0x57, 0xa8, 0xff, 0x04, 0x3d, 0x26, 0x14, 0x4b,
	0x44, 0x30, 0x66, 0xce, 0x9a, 0x78, 0x5d, 0x4d, 0xaa, 0x6f, 0xfc, 0x9b, 0x4a, 0x3a, 0xae, 0xc7,
	0x1b, 0x8a, 0xd4, 0x00, 0x39, 0xb4, 0xc6, 0x81, 0x2f, 0xc9, 0x97, 0xdc, 0x50, 0x7c, 0x0e, 0x71,
	0x1f, 0xda, 0xf3, 0x64, 0xe1, 0xb9, 0xf1, 0x03, 0x2d, 0x79, 0x73, 0xc0, 0x86, 0x96, 0x28, 0x89,
	0x54, 0xed, 0xfa, 0x3e, 0x88, 0x88, 0x9b, 0x03, 0x36, 0x6c, 0x08, 0x0d, 0x52, 0x97, 0x63, 0x47,
	0xd2, 0x2a, 0x88, 0xb6, 0xbc, 0xa5, 0x5d, 0xe6, 0xd8, 0x7e, 0x63, 0xf0, 0x47, 0xbb, 0xbc, 0x09,
	0x97, 0x8e, 0xa4, 0xdc, 0x6b, 0x0f, 0xea, 0xd3, 0x49, 0x96, 0xa9, 0x3e, 0x9d, 0xec, 0xc4, 0x7b,
	0xe1, 0xae, 0xf9, 0x95, 0x3b, 0xb3, 0xea, 0x0e, 0x0f, 0xa1, 0x57, 0x84, 0xbb, 0xf3, 0x13, 0xcf,
	0x53, 0xfe, 0xad, 0xab, 0x9a, 0xe8, 0x16, 0xfc, 0x2c, 0xf1, 0x3c, 0x3c, 0x82, 0xdf, 0xe5, 0xe0,
	0xc6, 0xf1, 0x12, 0xe2, 0x56, 0x36, 0x59, 0x2a, 0xdc, 0xa6, 0xfc, 0xc5, 0xaf, 0x0f, 0x2f, 0x68,
	0xbf, 0x32, 0xe8, 0xe5, 0x4b, 0xd2, 0x7b, 0xfb, 0x91, 0xe4, 0x3b, 0xde, 0x5a, 0xaa, 0x37, 0x8e,
	0xc8, 0x91, 0xb4, 0x3c, 0x97, 0x2a, 0x68, 0x5b, 0x94, 0xc4, 0xf1, 0x0b, 0x03, 0x53, 0x87, 0xc2,
	0x53, 0x30, 0x35, 0x8f, 0xff, 0x46, 0x59, 0xa5, 0x2b, 0x9d, 0xec, 0xff, 0xff, 0x4c, 0x67, 0xed,
	0xad, 0xe1, 0x19, 0x98, 0xba, 0x12, 0xb8, 0x57, 0x9d, 0xa9, 0x14, 0xe5, 0x1b, 0x81, 0x03, 0x30,
	0xe6, 0xae, 0xbf, 0xc2, 0x6e, 0x3e, 0xa1, 0x6e, 0xa7, 0xdf, 0xc9, 0x61, 0x7a, 0x41, 0x76, 0x6d,
	0x61, 0xaa, 0x1b, 0x3b, 0x79, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x27, 0x87, 0x3f, 0x73, 0x03,
	0x00, 0x00,
}

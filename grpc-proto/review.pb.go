// Code generated by protoc-gen-go. DO NOT EDIT.
// source: review.proto

/*
Package review is a generated protocol buffer package.

It is generated from these files:
	review.proto

It has these top-level messages:
	Empty
	Pong
	ReviewRequest
	ReviewResponse
*/
package review

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Pong struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pong) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

// Request message for creating a new fail mail
type ReviewRequest struct {
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	Published bool   `protobuf:"varint,5,opt,name=Published" json:"Published,omitempty"`
	Score     uint64 `protobuf:"varint,6,opt,name=Score" json:"Score,omitempty"`
	Category  string `protobuf:"bytes,7,opt,name=Category" json:"Category,omitempty"`
}

func (m *ReviewRequest) Reset()                    { *m = ReviewRequest{} }
func (m *ReviewRequest) String() string            { return proto.CompactTextString(m) }
func (*ReviewRequest) ProtoMessage()               {}
func (*ReviewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReviewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReviewRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReviewRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviewRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *ReviewRequest) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ReviewRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

// Response of fail mail
type ReviewResponse struct {
	ID        string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	Published bool   `protobuf:"varint,5,opt,name=Published" json:"Published,omitempty"`
	Score     uint64 `protobuf:"varint,6,opt,name=Score" json:"Score,omitempty"`
	Category  string `protobuf:"bytes,7,opt,name=Category" json:"Category,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
}

func (m *ReviewResponse) Reset()                    { *m = ReviewResponse{} }
func (m *ReviewResponse) String() string            { return proto.CompactTextString(m) }
func (*ReviewResponse) ProtoMessage()               {}
func (*ReviewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReviewResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ReviewResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReviewResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReviewResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviewResponse) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *ReviewResponse) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ReviewResponse) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ReviewResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "review.Empty")
	proto.RegisterType((*Pong)(nil), "review.Pong")
	proto.RegisterType((*ReviewRequest)(nil), "review.ReviewRequest")
	proto.RegisterType((*ReviewResponse)(nil), "review.ReviewResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Review service

type ReviewClient interface {
	Create(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	Update(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
}

type reviewClient struct {
	cc *grpc.ClientConn
}

func NewReviewClient(cc *grpc.ClientConn) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) Create(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := grpc.Invoke(ctx, "/review.Review/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Update(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := grpc.Invoke(ctx, "/review.Review/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/review.Review/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Review service

type ReviewServer interface {
	Create(context.Context, *ReviewRequest) (*ReviewResponse, error)
	Update(context.Context, *ReviewRequest) (*ReviewResponse, error)
	Ping(context.Context, *Empty) (*Pong, error)
}

func RegisterReviewServer(s *grpc.Server, srv ReviewServer) {
	s.RegisterService(&_Review_serviceDesc, srv)
}

func _Review_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Create(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Update(ctx, req.(*ReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Review_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Review_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Review_Update_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Review_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review.proto",
}

func init() { proto.RegisterFile("review.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x35, 0x4d, 0xd2, 0xa1, 0xed, 0x61, 0x50, 0x59, 0x82, 0x87, 0xb0, 0x20, 0xe4,
	0xd4, 0x83, 0x9e, 0x3c, 0x4a, 0xea, 0xa1, 0x17, 0x09, 0x11, 0x1f, 0x20, 0x35, 0x43, 0x0c, 0xb4,
	0xd9, 0xb8, 0xd9, 0x2a, 0x7d, 0x1e, 0xf1, 0x85, 0x7c, 0x22, 0xd9, 0xdd, 0xc4, 0xa2, 0x47, 0x4f,
	0xde, 0xf6, 0xfb, 0x77, 0x66, 0xf8, 0x87, 0xf9, 0x61, 0xa6, 0xe8, 0xb5, 0xa6, 0xb7, 0x65, 0xab,
	0xa4, 0x96, 0xe8, 0x3b, 0x12, 0x01, 0x4c, 0xee, 0x76, 0xad, 0x3e, 0x08, 0x01, 0x5e, 0x26, 0x9b,
	0x0a, 0x23, 0x08, 0x15, 0x75, 0xad, 0x6c, 0x3a, 0xe2, 0x2c, 0x66, 0xc9, 0x34, 0xff, 0x66, 0xf1,
	0xce, 0x60, 0x9e, 0xdb, 0xbe, 0x9c, 0x5e, 0xf6, 0xd4, 0x69, 0x44, 0xf0, 0xee, 0x8b, 0x1d, 0xf1,
	0xb1, 0xad, 0xb4, 0x6f, 0x3c, 0x35, 0x23, 0x8b, 0x7a, 0xcb, 0x4f, 0xac, 0xe8, 0x00, 0x39, 0x04,
	0xa9, 0x6c, 0x34, 0x35, 0x9a, 0x7b, 0x56, 0x1f, 0x10, 0x2f, 0x60, 0x9a, 0xed, 0x37, 0xdb, 0xba,
	0x7b, 0xa6, 0x92, 0x4f, 0x62, 0x96, 0x84, 0xf9, 0x51, 0x30, 0xd3, 0x1e, 0x9e, 0xa4, 0x22, 0xee,
	0xc7, 0x2c, 0xf1, 0x72, 0x07, 0xc6, 0x65, 0x5a, 0x68, 0xaa, 0xa4, 0x3a, 0xf0, 0xc0, 0xb9, 0x1c,
	0x58, 0x7c, 0x32, 0x58, 0x0c, 0x2e, 0x9d, 0x71, 0x5c, 0xc0, 0x78, 0xbd, 0xea, 0xd7, 0x19, 0xaf,
	0x57, 0xff, 0xd1, 0xb6, 0x99, 0x97, 0x2a, 0x2a, 0x34, 0x95, 0xb7, 0x9a, 0x87, 0xf6, 0xf3, 0x28,
	0x5c, 0x7d, 0x30, 0xf0, 0xdd, 0x52, 0x78, 0x03, 0xbe, 0xd3, 0xf1, 0x6c, 0xd9, 0xdf, 0xf4, 0xc7,
	0x51, 0xa2, 0xf3, 0xdf, 0x72, 0x7f, 0xbe, 0x91, 0x69, 0x7d, 0x6c, 0xcb, 0x3f, 0xb5, 0x5e, 0x82,
	0x97, 0xd5, 0x4d, 0x85, 0xf3, 0xa1, 0xc2, 0xc6, 0x26, 0x9a, 0x0d, 0x68, 0xc2, 0x23, 0x46, 0x1b,
	0xdf, 0xc6, 0xeb, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x48, 0x0e, 0xbd, 0x55, 0x6e, 0x02, 0x00,
	0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: review.proto

/*
Package review is a generated protocol buffer package.

It is generated from these files:
	review.proto

It has these top-level messages:
	Empty
	Criteria
	ReviewListFilter
	ReviewCountFilter
	CountResponse
	Pong
	ReviewID
	ReviewCreateRequest
	FieldToUpdate
	ReviewUpdateRequest
	ReviewResponse
*/
package review

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty is some sort if missing input parameter
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Criteria struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Criteria) Reset()                    { *m = Criteria{} }
func (m *Criteria) String() string            { return proto.CompactTextString(m) }
func (*Criteria) ProtoMessage()               {}
func (*Criteria) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Criteria) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Criteria) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ReviewListFilter struct {
	Criteria []*Criteria `protobuf:"bytes,1,rep,name=criteria" json:"criteria,omitempty"`
	Limit    int64       `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset   int64       `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *ReviewListFilter) Reset()                    { *m = ReviewListFilter{} }
func (m *ReviewListFilter) String() string            { return proto.CompactTextString(m) }
func (*ReviewListFilter) ProtoMessage()               {}
func (*ReviewListFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReviewListFilter) GetCriteria() []*Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (m *ReviewListFilter) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReviewListFilter) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ReviewCountFilter struct {
	Criteria []*Criteria `protobuf:"bytes,1,rep,name=criteria" json:"criteria,omitempty"`
}

func (m *ReviewCountFilter) Reset()                    { *m = ReviewCountFilter{} }
func (m *ReviewCountFilter) String() string            { return proto.CompactTextString(m) }
func (*ReviewCountFilter) ProtoMessage()               {}
func (*ReviewCountFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReviewCountFilter) GetCriteria() []*Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

// CountResponse returns total number of reviews
type CountResponse struct {
	Total int64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CountResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Pong simple response
type Pong struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Pong) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type ReviewID struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ReviewID) Reset()                    { *m = ReviewID{} }
func (m *ReviewID) String() string            { return proto.CompactTextString(m) }
func (*ReviewID) ProtoMessage()               {}
func (*ReviewID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReviewID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// ReviewCreateRequest message for creating a new review
type ReviewCreateRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Email     string `protobuf:"bytes,2,opt,name=Email" json:"Email,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty"`
	Published bool   `protobuf:"varint,4,opt,name=Published" json:"Published,omitempty"`
	// Types that are valid to be assigned to Score:
	//	*ReviewCreateRequest_ScoreNull
	//	*ReviewCreateRequest_ScoreValue
	Score isReviewCreateRequest_Score `protobuf_oneof:"Score"`
	// Types that are valid to be assigned to Category:
	//	*ReviewCreateRequest_CategoryNull
	//	*ReviewCreateRequest_CategoryValue
	Category isReviewCreateRequest_Category `protobuf_oneof:"Category"`
}

func (m *ReviewCreateRequest) Reset()                    { *m = ReviewCreateRequest{} }
func (m *ReviewCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ReviewCreateRequest) ProtoMessage()               {}
func (*ReviewCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isReviewCreateRequest_Score interface {
	isReviewCreateRequest_Score()
}
type isReviewCreateRequest_Category interface {
	isReviewCreateRequest_Category()
}

type ReviewCreateRequest_ScoreNull struct {
	ScoreNull bool `protobuf:"varint,5,opt,name=score_null,json=scoreNull,oneof"`
}
type ReviewCreateRequest_ScoreValue struct {
	ScoreValue int64 `protobuf:"varint,6,opt,name=score_value,json=scoreValue,oneof"`
}
type ReviewCreateRequest_CategoryNull struct {
	CategoryNull bool `protobuf:"varint,7,opt,name=category_null,json=categoryNull,oneof"`
}
type ReviewCreateRequest_CategoryValue struct {
	CategoryValue string `protobuf:"bytes,8,opt,name=category_value,json=categoryValue,oneof"`
}

func (*ReviewCreateRequest_ScoreNull) isReviewCreateRequest_Score()        {}
func (*ReviewCreateRequest_ScoreValue) isReviewCreateRequest_Score()       {}
func (*ReviewCreateRequest_CategoryNull) isReviewCreateRequest_Category()  {}
func (*ReviewCreateRequest_CategoryValue) isReviewCreateRequest_Category() {}

func (m *ReviewCreateRequest) GetScore() isReviewCreateRequest_Score {
	if m != nil {
		return m.Score
	}
	return nil
}
func (m *ReviewCreateRequest) GetCategory() isReviewCreateRequest_Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *ReviewCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReviewCreateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReviewCreateRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviewCreateRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *ReviewCreateRequest) GetScoreNull() bool {
	if x, ok := m.GetScore().(*ReviewCreateRequest_ScoreNull); ok {
		return x.ScoreNull
	}
	return false
}

func (m *ReviewCreateRequest) GetScoreValue() int64 {
	if x, ok := m.GetScore().(*ReviewCreateRequest_ScoreValue); ok {
		return x.ScoreValue
	}
	return 0
}

func (m *ReviewCreateRequest) GetCategoryNull() bool {
	if x, ok := m.GetCategory().(*ReviewCreateRequest_CategoryNull); ok {
		return x.CategoryNull
	}
	return false
}

func (m *ReviewCreateRequest) GetCategoryValue() string {
	if x, ok := m.GetCategory().(*ReviewCreateRequest_CategoryValue); ok {
		return x.CategoryValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReviewCreateRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReviewCreateRequest_OneofMarshaler, _ReviewCreateRequest_OneofUnmarshaler, _ReviewCreateRequest_OneofSizer, []interface{}{
		(*ReviewCreateRequest_ScoreNull)(nil),
		(*ReviewCreateRequest_ScoreValue)(nil),
		(*ReviewCreateRequest_CategoryNull)(nil),
		(*ReviewCreateRequest_CategoryValue)(nil),
	}
}

func _ReviewCreateRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReviewCreateRequest)
	// Score
	switch x := m.Score.(type) {
	case *ReviewCreateRequest_ScoreNull:
		t := uint64(0)
		if x.ScoreNull {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ReviewCreateRequest_ScoreValue:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ScoreValue))
	case nil:
	default:
		return fmt.Errorf("ReviewCreateRequest.Score has unexpected type %T", x)
	}
	// Category
	switch x := m.Category.(type) {
	case *ReviewCreateRequest_CategoryNull:
		t := uint64(0)
		if x.CategoryNull {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ReviewCreateRequest_CategoryValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CategoryValue)
	case nil:
	default:
		return fmt.Errorf("ReviewCreateRequest.Category has unexpected type %T", x)
	}
	return nil
}

func _ReviewCreateRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReviewCreateRequest)
	switch tag {
	case 5: // Score.score_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Score = &ReviewCreateRequest_ScoreNull{x != 0}
		return true, err
	case 6: // Score.score_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Score = &ReviewCreateRequest_ScoreValue{int64(x)}
		return true, err
	case 7: // Category.category_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Category = &ReviewCreateRequest_CategoryNull{x != 0}
		return true, err
	case 8: // Category.category_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Category = &ReviewCreateRequest_CategoryValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _ReviewCreateRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReviewCreateRequest)
	// Score
	switch x := m.Score.(type) {
	case *ReviewCreateRequest_ScoreNull:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *ReviewCreateRequest_ScoreValue:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ScoreValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Category
	switch x := m.Category.(type) {
	case *ReviewCreateRequest_CategoryNull:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *ReviewCreateRequest_CategoryValue:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CategoryValue)))
		n += len(x.CategoryValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FieldToUpdate struct {
	// Types that are valid to be assigned to Name:
	//	*FieldToUpdate_NameNull
	//	*FieldToUpdate_NameValue
	Name isFieldToUpdate_Name `protobuf_oneof:"Name"`
	// Types that are valid to be assigned to Content:
	//	*FieldToUpdate_ContentNull
	//	*FieldToUpdate_ContentValue
	Content isFieldToUpdate_Content `protobuf_oneof:"Content"`
	// Types that are valid to be assigned to Published:
	//	*FieldToUpdate_PublishedNull
	//	*FieldToUpdate_PublishedValue
	Published isFieldToUpdate_Published `protobuf_oneof:"Published"`
	// Types that are valid to be assigned to Score:
	//	*FieldToUpdate_ScoreNull
	//	*FieldToUpdate_ScoreValue
	Score isFieldToUpdate_Score `protobuf_oneof:"Score"`
	// Types that are valid to be assigned to Category:
	//	*FieldToUpdate_CategoryNull
	//	*FieldToUpdate_CategoryValue
	Category isFieldToUpdate_Category `protobuf_oneof:"Category"`
}

func (m *FieldToUpdate) Reset()                    { *m = FieldToUpdate{} }
func (m *FieldToUpdate) String() string            { return proto.CompactTextString(m) }
func (*FieldToUpdate) ProtoMessage()               {}
func (*FieldToUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isFieldToUpdate_Name interface {
	isFieldToUpdate_Name()
}
type isFieldToUpdate_Content interface {
	isFieldToUpdate_Content()
}
type isFieldToUpdate_Published interface {
	isFieldToUpdate_Published()
}
type isFieldToUpdate_Score interface {
	isFieldToUpdate_Score()
}
type isFieldToUpdate_Category interface {
	isFieldToUpdate_Category()
}

type FieldToUpdate_NameNull struct {
	NameNull bool `protobuf:"varint,1,opt,name=name_null,json=nameNull,oneof"`
}
type FieldToUpdate_NameValue struct {
	NameValue string `protobuf:"bytes,2,opt,name=name_value,json=nameValue,oneof"`
}
type FieldToUpdate_ContentNull struct {
	ContentNull bool `protobuf:"varint,3,opt,name=content_null,json=contentNull,oneof"`
}
type FieldToUpdate_ContentValue struct {
	ContentValue string `protobuf:"bytes,4,opt,name=content_value,json=contentValue,oneof"`
}
type FieldToUpdate_PublishedNull struct {
	PublishedNull bool `protobuf:"varint,5,opt,name=published_null,json=publishedNull,oneof"`
}
type FieldToUpdate_PublishedValue struct {
	PublishedValue bool `protobuf:"varint,6,opt,name=published_value,json=publishedValue,oneof"`
}
type FieldToUpdate_ScoreNull struct {
	ScoreNull bool `protobuf:"varint,7,opt,name=score_null,json=scoreNull,oneof"`
}
type FieldToUpdate_ScoreValue struct {
	ScoreValue int64 `protobuf:"varint,8,opt,name=score_value,json=scoreValue,oneof"`
}
type FieldToUpdate_CategoryNull struct {
	CategoryNull bool `protobuf:"varint,9,opt,name=category_null,json=categoryNull,oneof"`
}
type FieldToUpdate_CategoryValue struct {
	CategoryValue string `protobuf:"bytes,10,opt,name=category_value,json=categoryValue,oneof"`
}

func (*FieldToUpdate_NameNull) isFieldToUpdate_Name()            {}
func (*FieldToUpdate_NameValue) isFieldToUpdate_Name()           {}
func (*FieldToUpdate_ContentNull) isFieldToUpdate_Content()      {}
func (*FieldToUpdate_ContentValue) isFieldToUpdate_Content()     {}
func (*FieldToUpdate_PublishedNull) isFieldToUpdate_Published()  {}
func (*FieldToUpdate_PublishedValue) isFieldToUpdate_Published() {}
func (*FieldToUpdate_ScoreNull) isFieldToUpdate_Score()          {}
func (*FieldToUpdate_ScoreValue) isFieldToUpdate_Score()         {}
func (*FieldToUpdate_CategoryNull) isFieldToUpdate_Category()    {}
func (*FieldToUpdate_CategoryValue) isFieldToUpdate_Category()   {}

func (m *FieldToUpdate) GetName() isFieldToUpdate_Name {
	if m != nil {
		return m.Name
	}
	return nil
}
func (m *FieldToUpdate) GetContent() isFieldToUpdate_Content {
	if m != nil {
		return m.Content
	}
	return nil
}
func (m *FieldToUpdate) GetPublished() isFieldToUpdate_Published {
	if m != nil {
		return m.Published
	}
	return nil
}
func (m *FieldToUpdate) GetScore() isFieldToUpdate_Score {
	if m != nil {
		return m.Score
	}
	return nil
}
func (m *FieldToUpdate) GetCategory() isFieldToUpdate_Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *FieldToUpdate) GetNameNull() bool {
	if x, ok := m.GetName().(*FieldToUpdate_NameNull); ok {
		return x.NameNull
	}
	return false
}

func (m *FieldToUpdate) GetNameValue() string {
	if x, ok := m.GetName().(*FieldToUpdate_NameValue); ok {
		return x.NameValue
	}
	return ""
}

func (m *FieldToUpdate) GetContentNull() bool {
	if x, ok := m.GetContent().(*FieldToUpdate_ContentNull); ok {
		return x.ContentNull
	}
	return false
}

func (m *FieldToUpdate) GetContentValue() string {
	if x, ok := m.GetContent().(*FieldToUpdate_ContentValue); ok {
		return x.ContentValue
	}
	return ""
}

func (m *FieldToUpdate) GetPublishedNull() bool {
	if x, ok := m.GetPublished().(*FieldToUpdate_PublishedNull); ok {
		return x.PublishedNull
	}
	return false
}

func (m *FieldToUpdate) GetPublishedValue() bool {
	if x, ok := m.GetPublished().(*FieldToUpdate_PublishedValue); ok {
		return x.PublishedValue
	}
	return false
}

func (m *FieldToUpdate) GetScoreNull() bool {
	if x, ok := m.GetScore().(*FieldToUpdate_ScoreNull); ok {
		return x.ScoreNull
	}
	return false
}

func (m *FieldToUpdate) GetScoreValue() int64 {
	if x, ok := m.GetScore().(*FieldToUpdate_ScoreValue); ok {
		return x.ScoreValue
	}
	return 0
}

func (m *FieldToUpdate) GetCategoryNull() bool {
	if x, ok := m.GetCategory().(*FieldToUpdate_CategoryNull); ok {
		return x.CategoryNull
	}
	return false
}

func (m *FieldToUpdate) GetCategoryValue() string {
	if x, ok := m.GetCategory().(*FieldToUpdate_CategoryValue); ok {
		return x.CategoryValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FieldToUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FieldToUpdate_OneofMarshaler, _FieldToUpdate_OneofUnmarshaler, _FieldToUpdate_OneofSizer, []interface{}{
		(*FieldToUpdate_NameNull)(nil),
		(*FieldToUpdate_NameValue)(nil),
		(*FieldToUpdate_ContentNull)(nil),
		(*FieldToUpdate_ContentValue)(nil),
		(*FieldToUpdate_PublishedNull)(nil),
		(*FieldToUpdate_PublishedValue)(nil),
		(*FieldToUpdate_ScoreNull)(nil),
		(*FieldToUpdate_ScoreValue)(nil),
		(*FieldToUpdate_CategoryNull)(nil),
		(*FieldToUpdate_CategoryValue)(nil),
	}
}

func _FieldToUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FieldToUpdate)
	// Name
	switch x := m.Name.(type) {
	case *FieldToUpdate_NameNull:
		t := uint64(0)
		if x.NameNull {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *FieldToUpdate_NameValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NameValue)
	case nil:
	default:
		return fmt.Errorf("FieldToUpdate.Name has unexpected type %T", x)
	}
	// Content
	switch x := m.Content.(type) {
	case *FieldToUpdate_ContentNull:
		t := uint64(0)
		if x.ContentNull {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *FieldToUpdate_ContentValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ContentValue)
	case nil:
	default:
		return fmt.Errorf("FieldToUpdate.Content has unexpected type %T", x)
	}
	// Published
	switch x := m.Published.(type) {
	case *FieldToUpdate_PublishedNull:
		t := uint64(0)
		if x.PublishedNull {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *FieldToUpdate_PublishedValue:
		t := uint64(0)
		if x.PublishedValue {
			t = 1
		}
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("FieldToUpdate.Published has unexpected type %T", x)
	}
	// Score
	switch x := m.Score.(type) {
	case *FieldToUpdate_ScoreNull:
		t := uint64(0)
		if x.ScoreNull {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *FieldToUpdate_ScoreValue:
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ScoreValue))
	case nil:
	default:
		return fmt.Errorf("FieldToUpdate.Score has unexpected type %T", x)
	}
	// Category
	switch x := m.Category.(type) {
	case *FieldToUpdate_CategoryNull:
		t := uint64(0)
		if x.CategoryNull {
			t = 1
		}
		b.EncodeVarint(9<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *FieldToUpdate_CategoryValue:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CategoryValue)
	case nil:
	default:
		return fmt.Errorf("FieldToUpdate.Category has unexpected type %T", x)
	}
	return nil
}

func _FieldToUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FieldToUpdate)
	switch tag {
	case 1: // Name.name_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Name = &FieldToUpdate_NameNull{x != 0}
		return true, err
	case 2: // Name.name_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Name = &FieldToUpdate_NameValue{x}
		return true, err
	case 3: // Content.content_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Content = &FieldToUpdate_ContentNull{x != 0}
		return true, err
	case 4: // Content.content_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Content = &FieldToUpdate_ContentValue{x}
		return true, err
	case 5: // Published.published_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Published = &FieldToUpdate_PublishedNull{x != 0}
		return true, err
	case 6: // Published.published_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Published = &FieldToUpdate_PublishedValue{x != 0}
		return true, err
	case 7: // Score.score_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Score = &FieldToUpdate_ScoreNull{x != 0}
		return true, err
	case 8: // Score.score_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Score = &FieldToUpdate_ScoreValue{int64(x)}
		return true, err
	case 9: // Category.category_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Category = &FieldToUpdate_CategoryNull{x != 0}
		return true, err
	case 10: // Category.category_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Category = &FieldToUpdate_CategoryValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _FieldToUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FieldToUpdate)
	// Name
	switch x := m.Name.(type) {
	case *FieldToUpdate_NameNull:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *FieldToUpdate_NameValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.NameValue)))
		n += len(x.NameValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Content
	switch x := m.Content.(type) {
	case *FieldToUpdate_ContentNull:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case *FieldToUpdate_ContentValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ContentValue)))
		n += len(x.ContentValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Published
	switch x := m.Published.(type) {
	case *FieldToUpdate_PublishedNull:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *FieldToUpdate_PublishedValue:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Score
	switch x := m.Score.(type) {
	case *FieldToUpdate_ScoreNull:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *FieldToUpdate_ScoreValue:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ScoreValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Category
	switch x := m.Category.(type) {
	case *FieldToUpdate_CategoryNull:
		n += proto.SizeVarint(9<<3 | proto.WireVarint)
		n += 1
	case *FieldToUpdate_CategoryValue:
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CategoryValue)))
		n += len(x.CategoryValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReviewUpdateRequest for updating an existing review
type ReviewUpdateRequest struct {
	ID             string         `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	FieldsToUpdate *FieldToUpdate `protobuf:"bytes,2,opt,name=fields_to_update,json=fieldsToUpdate" json:"fields_to_update,omitempty"`
}

func (m *ReviewUpdateRequest) Reset()                    { *m = ReviewUpdateRequest{} }
func (m *ReviewUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ReviewUpdateRequest) ProtoMessage()               {}
func (*ReviewUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReviewUpdateRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ReviewUpdateRequest) GetFieldsToUpdate() *FieldToUpdate {
	if m != nil {
		return m.FieldsToUpdate
	}
	return nil
}

// Response of a review
type ReviewResponse struct {
	ID        string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	Published bool   `protobuf:"varint,5,opt,name=Published" json:"Published,omitempty"`
	// Types that are valid to be assigned to Score:
	//	*ReviewResponse_ScoreNull
	//	*ReviewResponse_ScoreValue
	Score isReviewResponse_Score `protobuf_oneof:"Score"`
	// Types that are valid to be assigned to Category:
	//	*ReviewResponse_CategoryNull
	//	*ReviewResponse_CategoryValue
	Category  isReviewResponse_Category `protobuf_oneof:"Category"`
	CreatedAt string                    `protobuf:"bytes,10,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	UpdatedAt string                    `protobuf:"bytes,11,opt,name=UpdatedAt" json:"UpdatedAt,omitempty"`
}

func (m *ReviewResponse) Reset()                    { *m = ReviewResponse{} }
func (m *ReviewResponse) String() string            { return proto.CompactTextString(m) }
func (*ReviewResponse) ProtoMessage()               {}
func (*ReviewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isReviewResponse_Score interface {
	isReviewResponse_Score()
}
type isReviewResponse_Category interface {
	isReviewResponse_Category()
}

type ReviewResponse_ScoreNull struct {
	ScoreNull bool `protobuf:"varint,6,opt,name=score_null,json=scoreNull,oneof"`
}
type ReviewResponse_ScoreValue struct {
	ScoreValue int64 `protobuf:"varint,7,opt,name=score_value,json=scoreValue,oneof"`
}
type ReviewResponse_CategoryNull struct {
	CategoryNull bool `protobuf:"varint,8,opt,name=category_null,json=categoryNull,oneof"`
}
type ReviewResponse_CategoryValue struct {
	CategoryValue string `protobuf:"bytes,9,opt,name=category_value,json=categoryValue,oneof"`
}

func (*ReviewResponse_ScoreNull) isReviewResponse_Score()        {}
func (*ReviewResponse_ScoreValue) isReviewResponse_Score()       {}
func (*ReviewResponse_CategoryNull) isReviewResponse_Category()  {}
func (*ReviewResponse_CategoryValue) isReviewResponse_Category() {}

func (m *ReviewResponse) GetScore() isReviewResponse_Score {
	if m != nil {
		return m.Score
	}
	return nil
}
func (m *ReviewResponse) GetCategory() isReviewResponse_Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *ReviewResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ReviewResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReviewResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ReviewResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReviewResponse) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *ReviewResponse) GetScoreNull() bool {
	if x, ok := m.GetScore().(*ReviewResponse_ScoreNull); ok {
		return x.ScoreNull
	}
	return false
}

func (m *ReviewResponse) GetScoreValue() int64 {
	if x, ok := m.GetScore().(*ReviewResponse_ScoreValue); ok {
		return x.ScoreValue
	}
	return 0
}

func (m *ReviewResponse) GetCategoryNull() bool {
	if x, ok := m.GetCategory().(*ReviewResponse_CategoryNull); ok {
		return x.CategoryNull
	}
	return false
}

func (m *ReviewResponse) GetCategoryValue() string {
	if x, ok := m.GetCategory().(*ReviewResponse_CategoryValue); ok {
		return x.CategoryValue
	}
	return ""
}

func (m *ReviewResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ReviewResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReviewResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReviewResponse_OneofMarshaler, _ReviewResponse_OneofUnmarshaler, _ReviewResponse_OneofSizer, []interface{}{
		(*ReviewResponse_ScoreNull)(nil),
		(*ReviewResponse_ScoreValue)(nil),
		(*ReviewResponse_CategoryNull)(nil),
		(*ReviewResponse_CategoryValue)(nil),
	}
}

func _ReviewResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReviewResponse)
	// Score
	switch x := m.Score.(type) {
	case *ReviewResponse_ScoreNull:
		t := uint64(0)
		if x.ScoreNull {
			t = 1
		}
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ReviewResponse_ScoreValue:
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ScoreValue))
	case nil:
	default:
		return fmt.Errorf("ReviewResponse.Score has unexpected type %T", x)
	}
	// Category
	switch x := m.Category.(type) {
	case *ReviewResponse_CategoryNull:
		t := uint64(0)
		if x.CategoryNull {
			t = 1
		}
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ReviewResponse_CategoryValue:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CategoryValue)
	case nil:
	default:
		return fmt.Errorf("ReviewResponse.Category has unexpected type %T", x)
	}
	return nil
}

func _ReviewResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReviewResponse)
	switch tag {
	case 6: // Score.score_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Score = &ReviewResponse_ScoreNull{x != 0}
		return true, err
	case 7: // Score.score_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Score = &ReviewResponse_ScoreValue{int64(x)}
		return true, err
	case 8: // Category.category_null
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Category = &ReviewResponse_CategoryNull{x != 0}
		return true, err
	case 9: // Category.category_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Category = &ReviewResponse_CategoryValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _ReviewResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReviewResponse)
	// Score
	switch x := m.Score.(type) {
	case *ReviewResponse_ScoreNull:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += 1
	case *ReviewResponse_ScoreValue:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ScoreValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Category
	switch x := m.Category.(type) {
	case *ReviewResponse_CategoryNull:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += 1
	case *ReviewResponse_CategoryValue:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CategoryValue)))
		n += len(x.CategoryValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Empty)(nil), "review.Empty")
	proto.RegisterType((*Criteria)(nil), "review.Criteria")
	proto.RegisterType((*ReviewListFilter)(nil), "review.ReviewListFilter")
	proto.RegisterType((*ReviewCountFilter)(nil), "review.ReviewCountFilter")
	proto.RegisterType((*CountResponse)(nil), "review.CountResponse")
	proto.RegisterType((*Pong)(nil), "review.Pong")
	proto.RegisterType((*ReviewID)(nil), "review.ReviewID")
	proto.RegisterType((*ReviewCreateRequest)(nil), "review.ReviewCreateRequest")
	proto.RegisterType((*FieldToUpdate)(nil), "review.FieldToUpdate")
	proto.RegisterType((*ReviewUpdateRequest)(nil), "review.ReviewUpdateRequest")
	proto.RegisterType((*ReviewResponse)(nil), "review.ReviewResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Review service

type ReviewClient interface {
	// Create a new review
	Create(ctx context.Context, in *ReviewCreateRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	// Update an existing review
	Update(ctx context.Context, in *ReviewUpdateRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	// Returns a review by ID
	Get(ctx context.Context, in *ReviewID, opts ...grpc.CallOption) (*ReviewResponse, error)
	// Detect whether server works or not
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
	// Returns review list based on criteria
	GetReviewList(ctx context.Context, in *ReviewListFilter, opts ...grpc.CallOption) (Review_GetReviewListClient, error)
	// Returns a total number of reviews depending on criteria
	CountReviews(ctx context.Context, in *ReviewCountFilter, opts ...grpc.CallOption) (*CountResponse, error)
}

type reviewClient struct {
	cc *grpc.ClientConn
}

func NewReviewClient(cc *grpc.ClientConn) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) Create(ctx context.Context, in *ReviewCreateRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := grpc.Invoke(ctx, "/review.Review/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Update(ctx context.Context, in *ReviewUpdateRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := grpc.Invoke(ctx, "/review.Review/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Get(ctx context.Context, in *ReviewID, opts ...grpc.CallOption) (*ReviewResponse, error) {
	out := new(ReviewResponse)
	err := grpc.Invoke(ctx, "/review.Review/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/review.Review/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) GetReviewList(ctx context.Context, in *ReviewListFilter, opts ...grpc.CallOption) (Review_GetReviewListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Review_serviceDesc.Streams[0], c.cc, "/review.Review/GetReviewList", opts...)
	if err != nil {
		return nil, err
	}
	x := &reviewGetReviewListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Review_GetReviewListClient interface {
	Recv() (*ReviewResponse, error)
	grpc.ClientStream
}

type reviewGetReviewListClient struct {
	grpc.ClientStream
}

func (x *reviewGetReviewListClient) Recv() (*ReviewResponse, error) {
	m := new(ReviewResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reviewClient) CountReviews(ctx context.Context, in *ReviewCountFilter, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/review.Review/CountReviews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Review service

type ReviewServer interface {
	// Create a new review
	Create(context.Context, *ReviewCreateRequest) (*ReviewResponse, error)
	// Update an existing review
	Update(context.Context, *ReviewUpdateRequest) (*ReviewResponse, error)
	// Returns a review by ID
	Get(context.Context, *ReviewID) (*ReviewResponse, error)
	// Detect whether server works or not
	Ping(context.Context, *Empty) (*Pong, error)
	// Returns review list based on criteria
	GetReviewList(*ReviewListFilter, Review_GetReviewListServer) error
	// Returns a total number of reviews depending on criteria
	CountReviews(context.Context, *ReviewCountFilter) (*CountResponse, error)
}

func RegisterReviewServer(s *grpc.Server, srv ReviewServer) {
	s.RegisterService(&_Review_serviceDesc, srv)
}

func _Review_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Create(ctx, req.(*ReviewCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Update(ctx, req.(*ReviewUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Get(ctx, req.(*ReviewID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_GetReviewList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReviewListFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReviewServer).GetReviewList(m, &reviewGetReviewListServer{stream})
}

type Review_GetReviewListServer interface {
	Send(*ReviewResponse) error
	grpc.ServerStream
}

type reviewGetReviewListServer struct {
	grpc.ServerStream
}

func (x *reviewGetReviewListServer) Send(m *ReviewResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Review_CountReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewCountFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).CountReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.Review/CountReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).CountReviews(ctx, req.(*ReviewCountFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Review_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Review_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Review_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Review_Get_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Review_Ping_Handler,
		},
		{
			MethodName: "CountReviews",
			Handler:    _Review_CountReviews_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReviewList",
			Handler:       _Review_GetReviewList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "review.proto",
}

func init() { proto.RegisterFile("review.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdb, 0x6e, 0xdb, 0x38,
	0x10, 0xb5, 0x2e, 0x96, 0xa5, 0xf1, 0x65, 0xbd, 0xdc, 0xdd, 0x40, 0xeb, 0xb6, 0x48, 0xaa, 0x22,
	0x48, 0x0a, 0x14, 0x41, 0xeb, 0x7e, 0x40, 0x10, 0xdb, 0xb9, 0x18, 0x28, 0x82, 0x80, 0xbd, 0xbc,
	0x06, 0x8a, 0x4d, 0xa7, 0x42, 0x65, 0xc9, 0x95, 0xe8, 0x14, 0xf9, 0x9b, 0x7e, 0x46, 0xff, 0xa8,
	0x8f, 0xfd, 0x85, 0x82, 0x1c, 0x52, 0x8a, 0x0c, 0xc7, 0x09, 0xfa, 0xa6, 0xb9, 0xf0, 0x70, 0x38,
	0x67, 0x8e, 0x06, 0x5a, 0x19, 0xbb, 0x89, 0xd8, 0xb7, 0x83, 0x45, 0x96, 0xf2, 0x94, 0x38, 0x68,
	0x05, 0x0d, 0xa8, 0x1f, 0xcf, 0x17, 0xfc, 0x36, 0xe8, 0x83, 0x3b, 0xcc, 0x22, 0xce, 0xb2, 0x28,
	0x24, 0x5d, 0xb0, 0xbe, 0xb0, 0x5b, 0xdf, 0xd8, 0x31, 0xf6, 0x3d, 0x2a, 0x3e, 0xc9, 0xbf, 0x50,
	0xbf, 0x09, 0xe3, 0x25, 0xf3, 0x4d, 0xe9, 0x43, 0x23, 0x48, 0xa0, 0x4b, 0x25, 0xcc, 0xbb, 0x28,
	0xe7, 0x27, 0x51, 0xcc, 0x59, 0x46, 0x5e, 0x81, 0x3b, 0x51, 0x38, 0xbe, 0xb1, 0x63, 0xed, 0x37,
	0xfb, 0xdd, 0x03, 0x75, 0xb3, 0xc6, 0xa7, 0x45, 0x86, 0xc0, 0x8d, 0xa3, 0x79, 0xc4, 0x25, 0xae,
	0x45, 0xd1, 0x20, 0x5b, 0xe0, 0xa4, 0xb3, 0x59, 0xce, 0xb8, 0x6f, 0x49, 0xb7, 0xb2, 0x82, 0x23,
	0xf8, 0x1b, 0xef, 0x1b, 0xa6, 0xcb, 0xe4, 0x8f, 0x2e, 0x0c, 0x76, 0xa1, 0x2d, 0x0f, 0x53, 0x96,
	0x2f, 0xd2, 0x24, 0x67, 0xa2, 0x02, 0x9e, 0xf2, 0x30, 0x96, 0xaf, 0xb5, 0x28, 0x1a, 0x41, 0x00,
	0xf6, 0x45, 0x9a, 0x5c, 0x93, 0x1e, 0xb8, 0x99, 0xca, 0x54, 0xed, 0x28, 0xec, 0xa0, 0x07, 0x2e,
	0x56, 0x33, 0x1e, 0x91, 0x0e, 0x98, 0xe3, 0x91, 0xca, 0x30, 0xc7, 0xa3, 0xe0, 0xbb, 0x09, 0xff,
	0xa8, 0x52, 0x33, 0x16, 0x72, 0x46, 0xd9, 0xd7, 0x25, 0xcb, 0x39, 0x21, 0x60, 0x9f, 0x87, 0x73,
	0x8d, 0x25, 0xbf, 0x45, 0x05, 0xc7, 0xf3, 0x30, 0x8a, 0x75, 0x6f, 0xa5, 0x41, 0x7c, 0x68, 0x0c,
	0xd3, 0x84, 0xb3, 0x04, 0x9b, 0xe0, 0x51, 0x6d, 0x92, 0xa7, 0xe0, 0x5d, 0x2c, 0xaf, 0xe2, 0x28,
	0xff, 0xcc, 0xa6, 0xbe, 0xbd, 0x63, 0xec, 0xbb, 0xb4, 0x74, 0x90, 0x6d, 0x80, 0x7c, 0x92, 0x66,
	0xec, 0x32, 0x59, 0xc6, 0xb1, 0x5f, 0x17, 0xe1, 0xb3, 0x1a, 0xf5, 0xa4, 0xef, 0x7c, 0x19, 0xc7,
	0xe4, 0x39, 0x34, 0x31, 0x01, 0x09, 0x75, 0xc4, 0xb3, 0xcf, 0x6a, 0x14, 0x4f, 0x7d, 0x12, 0x3e,
	0xb2, 0x0b, 0xed, 0x49, 0xc8, 0xd9, 0x75, 0x9a, 0xdd, 0x22, 0x4c, 0x43, 0xc2, 0x18, 0xb4, 0xa5,
	0xdd, 0x12, 0x69, 0x0f, 0x3a, 0x45, 0x1a, 0x82, 0xb9, 0xa2, 0xd2, 0x33, 0x83, 0x16, 0xc7, 0x25,
	0xde, 0xa0, 0x01, 0xf5, 0xf7, 0x02, 0x7d, 0x00, 0xe0, 0x0e, 0x55, 0x24, 0xf8, 0x61, 0x41, 0xfb,
	0x24, 0x62, 0xf1, 0xf4, 0x43, 0xfa, 0x71, 0x31, 0x0d, 0x39, 0x23, 0xcf, 0xc0, 0x4b, 0xc2, 0xb9,
	0xaa, 0xdc, 0x50, 0x95, 0xbb, 0xc2, 0x25, 0xaf, 0xdb, 0x06, 0x90, 0xe1, 0x3b, 0x83, 0x28, 0x5e,
	0x26, 0x7c, 0x58, 0xf6, 0x0b, 0x68, 0x4d, 0xb0, 0x47, 0x08, 0x61, 0xa9, 0xaa, 0x9b, 0xca, 0x2b,
	0x51, 0xc4, 0xdb, 0x54, 0x12, 0x02, 0xd9, 0xaa, 0x66, 0x7d, 0x16, 0xb1, 0xf6, 0xa0, 0xb3, 0xd0,
	0x3d, 0xbd, 0xdb, 0x4a, 0x93, 0xb6, 0x0b, 0xbf, 0xc4, 0x7b, 0x09, 0x7f, 0x95, 0x89, 0x65, 0x4b,
	0x45, 0x66, 0x89, 0x80, 0x98, 0x55, 0x6a, 0xb0, 0xa7, 0xd6, 0x06, 0x6a, 0x5c, 0x49, 0x8d, 0xb5,
	0x99, 0x1a, 0x4f, 0xc2, 0xd8, 0x0f, 0x52, 0x03, 0xf2, 0x99, 0xf6, 0x2a, 0x35, 0x0e, 0x0e, 0xe4,
	0xc0, 0x2b, 0xc6, 0x6d, 0xd0, 0xbc, 0x33, 0x5f, 0xeb, 0xa9, 0x9b, 0xe9, 0xe1, 0x46, 0xe2, 0xf4,
	0x70, 0xaf, 0x88, 0x80, 0x1c, 0x42, 0x77, 0x26, 0x08, 0xce, 0x2f, 0x79, 0x7a, 0xb9, 0x94, 0xa9,
	0x92, 0xb6, 0x66, 0xff, 0x3f, 0xad, 0xd0, 0xca, 0x00, 0xd0, 0x0e, 0xa6, 0x6b, 0x3b, 0xf8, 0x69,
	0x42, 0x07, 0x2f, 0x2a, 0xe4, 0xba, 0x7a, 0x87, 0x16, 0x94, 0xb9, 0x4e, 0x50, 0xd6, 0x3d, 0x82,
	0xb2, 0x37, 0x08, 0xaa, 0xbe, 0x59, 0x50, 0xce, 0x83, 0x82, 0x6a, 0x3c, 0x46, 0x50, 0xee, 0x23,
	0x05, 0xe5, 0xad, 0x15, 0x94, 0xa8, 0x18, 0xff, 0x2b, 0xd3, 0x23, 0x8e, 0xcc, 0xd2, 0xd2, 0x21,
	0xa2, 0xd8, 0x40, 0x11, 0x6d, 0x62, 0xb4, 0x70, 0xac, 0x65, 0xb4, 0xff, 0xcb, 0x04, 0x07, 0x3b,
	0x4d, 0x0e, 0xc1, 0x41, 0x28, 0xf2, 0x44, 0xb3, 0xb4, 0xe6, 0x4f, 0xd6, 0xdb, 0xaa, 0x06, 0x35,
	0x41, 0x41, 0x4d, 0x00, 0x28, 0x41, 0xaf, 0x00, 0x54, 0xa6, 0x65, 0x03, 0xc0, 0x1b, 0xb0, 0x4e,
	0x19, 0x27, 0xdd, 0x6a, 0xc2, 0x78, 0xb4, 0xe1, 0xc8, 0x2e, 0xd8, 0x17, 0x51, 0x72, 0x4d, 0xda,
	0x3a, 0x43, 0x2e, 0xb5, 0x5e, 0x4b, 0x9b, 0xe2, 0x67, 0x1e, 0xd4, 0xc8, 0x31, 0xb4, 0x4f, 0x19,
	0x2f, 0x77, 0x16, 0xf1, 0xab, 0x88, 0xe5, 0x1e, 0xbb, 0xff, 0xae, 0xd7, 0x06, 0x19, 0x40, 0x4b,
	0x2d, 0x11, 0x11, 0xca, 0xc9, 0xff, 0x2b, 0x8d, 0x2a, 0xb7, 0x53, 0xaf, 0x98, 0xf4, 0xca, 0xd6,
	0x09, 0x6a, 0x57, 0x8e, 0xdc, 0xc3, 0x6f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x28, 0xd0, 0xe8,
	0x1a, 0x97, 0x07, 0x00, 0x00,
}
